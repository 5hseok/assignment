name: 오픈갤러리 테스트

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Python ${{ matrix.python-version }} 설정
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: pip 업그레이드
      run: |
        python -m pip install --upgrade pip
    
    - name: 의존성 설치
      run: |
        pip install -r requirements.txt
        pip install coverage pytest pytest-django
    
    - name: 마이그레이션 확인
      run: |
        python manage.py makemigrations --check --dry-run
      env:
        DJANGO_SETTINGS_MODULE: test_settings
    
    - name: 테스트 실행 (커버리지 포함)
      run: |
        python run_tests.py --coverage --verbose
      env:
        DJANGO_SETTINGS_MODULE: test_settings
    
    - name: 커버리지 결과 업로드
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Python 설정
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    
    - name: 린팅 도구 설치
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: flake8으로 코드 스타일 검사
      run: |
        flake8 --max-line-length=100 --exclude=migrations,venv,env .
    
    - name: black으로 코드 포맷팅 검사
      run: |
        black --check --diff --line-length=100 .
    
    - name: isort로 import 정렬 검사
      run: |
        isort --check-only --diff --line-length=100 .

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Python 설정
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    
    - name: 보안 도구 설치
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
    
    - name: Bandit 보안 검사
      run: |
        bandit -r . -x /venv/,/env/,/migrations/ -f json -o bandit-report.json || true
    
    - name: Safety 의존성 취약점 검사
      run: |
        safety check --json --output safety-report.json || true
    
    - name: 보안 리포트 업로드
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
